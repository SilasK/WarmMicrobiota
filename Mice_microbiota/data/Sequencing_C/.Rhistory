normalized['C1.0']
hist(normalized['C1.0'])
hist(normalized['C1.0',])
hist(normalized[['C1.0',]])
hist(normalized[['C1.0']])
hist(data[['C1.0']])
# data in features x samples
# we are using the Count Zero Multiplicative approach
normalized <- cmultRepl(data, method="CZM", label=0)
hist(data[['C1.0']])
hist(normalized[['C1.0']])
# data in features x samples
# we are using the Count Zero Multiplicative approach
normalized <- t(cmultRepl(t(data), method="CZM", label=0))
hist(normalized[['C1.0']])
# data in features x samples
# we are using the Count Zero Multiplicative approach
normalized <- cmultRepl(t(data), method="CZM", label=0)
hist(normalized[['C1.0']])
hist(normalized[['C1.0']])
normalized
cmultRepl?
cmultRepl
?cmultRepl
# data in features x samples
# we are using the Count Zero Multiplicative approach
normalized <- cmultRepl(t(data), method="CZM", label=0)
d.clr= apply(data, 2, function(x) log(x) - mean(log(x)))
# it is important to first filter to remove rows that are exclusively 0 values
d.filt <- d.agg[rowSums(data) > 0,]
rowSums(data)
# it is important to first filter to remove rows that are exclusively 0 values
d.filt <- d.agg[rowSums(data) > 0,]
# it is important to first filter to remove rows that are exclusively 0 values
d.filt <- data[rowSums(data) > 0,]
# we are using the Count Zero Multiplicative approach
d.n0 <- cmultRepl(t(d.filt), method="CZM", label=0)
#copy paste data of interest
data <- read.table(pipe("pbpaste"), sep="\t", header = TRUE,row.names = 1)
# it is important to first filter to remove rows that are exclusively 0 values
d.filt <- data[rowSums(data) > 0,]
# zero replacement
# we are using the Count Zero Multiplicative approach
d.n0 <- cmultRepl(t(d.filt), method="CZM", label=0)
d.clr= apply(data, 2, function(x) log(x) - mean(log(x)))
## No. corrected values:  32498
# generate the centered log-ratio transformed data
# samples by row
d.clr <- apply(d.n0, 2, function(x) log(x) - mean(log(x)))
# apply a singular value decomposition to the dataset # do not use princomp function in R!!
pcx <- prcomp(t(d.clr))
# get the labels for the first two components
PC1 <- paste("PC1: ", round(pcx$sdev[1]^2/sum(pcx$sdev^2),3), sep="") PC2 <- paste("PC2: ", round(pcx$sdev[2]^2/sum(pcx$sdev^2),3), sep="")
pcx <- prcomp(t(d.clr))
# get the labels for the first two components
PC1 <- paste("PC1: ", round(pcx$sdev[1]^2/sum(pcx$sdev^2),3), sep="")
PC2 <- paste("PC2: ", round(pcx$sdev[2]^2/sum(pcx$sdev^2),3), sep="")
par(fig=c(0,1,0,1), new=TRUE)
# generate a scree plot
par(fig=c(0,0.8,0,1), new=TRUE)
biplot(pcx, cex=c(0.6,0.6), col=c("black", rgb(1,0,0,0.2)), var.axes=F, scale=0,
xlab=PC1, ylab=PC2)
pcx <- prcomp(t(d.clr))
# get the labels for the first two components
PC1 <- paste("PC1: ", round(pcx$sdev[1]^2/sum(pcx$sdev^2),3), sep="")
PC2 <- paste("PC2: ", round(pcx$sdev[2]^2/sum(pcx$sdev^2),3), sep="")
par(fig=c(0,1,0,1), new=TRUE)
# generate a scree plot
par(fig=c(0,0.8,0,1), new=TRUE)
biplot(pcx, cex=c(0.6,0.6), col=c("black", rgb(1,0,0,0.2)), var.axes=F, scale=0,
xlab=PC1, ylab=PC2)
pcx <- prcomp(t(d.clr))
# get the labels for the first two components
PC1 <- paste("PC1: ", round(pcx$sdev[1]^2/sum(pcx$sdev^2),3), sep="")
PC2 <- paste("PC2: ", round(pcx$sdev[2]^2/sum(pcx$sdev^2),3), sep="")
par(fig=c(0,1,0,1), new=TRUE)
# generate a scree plot
par(fig=c(0,0.8,0,1), new=TRUE)
biplot(pcx, cex=c(0.6,0.6), col=c("black", rgb(1,0,0,0.2)), var.axes=F, scale=0,
xlab=PC1, ylab=PC2)
biplot(pcx, cex=c(0.6,0.6), col=c("black", rgb(1,0,0,0.2)), var.axes=F, scale=0,
xlab=PC1, ylab=PC2)
d.clr
plot(pcx)
sum(rowSums(data) > 0)
sum(rowSums(data) == 0)
# it is important to first filter to remove rows that are exclusively 0 values
print(paste0("Remove ",sum(rowSums(data) == 0)," taxa because they are all zero")
)
normalized
View(normalized)
d.filt <- data[rowSums(data) > 0,]
# zero replacement
# we are using the Count Zero Multiplicative approach
d.n0 <- t(cmultRepl(t(d.filt), method="CZM", label=0))
normalized= apply(data, 1, function(x) log(x) - mean(log(x)))
hist(normalized[['C1.0']])
hist(normalized[[,'C1.0']])
normalized
hist(normalized[['C1.0']])
normalized['C1.0']
View(normalized)
# data in features x samples
# it is important to first filter to remove rows that are exclusively 0 values
print(paste0("Remove ",sum(rowSums(data) == 0)," taxa because they are all zero"))
d.filt <- data[rowSums(data) > 0,]
# zero replacement
# we are using the Count Zero Multiplicative approach
d.n0 <- cmultRepl(t(d.filt), method="CZM", label=0)
normalized= t(apply(data, 2, function(x) log(x) - mean(log(x))))
hist(normalized[['C1.0']])
colnames(normalized)
normalized= apply(data, 2, function(x) log(x) - mean(log(x)))
colnames(normalized)
rowSums(data)
hist(normalized[['C1.0']])
colnames(normalized)
hist(normalized[['R1.0']])
hist(normalized[['R1.0',]])
hist(normalized['R1.0'])
normalized['R1.0']
normalized['R1.0',]
mean(d.n0)
colMeans(d.n0)
rowMeans(d.n0)
View(d.n0)
normalized= apply(data, 2, function(x) log2(x) - mean(log2(x)))
head(normalized)
log2(normalized)
normalized= apply(d.filt, 2, function(x) log2(x) - mean(log2(x)))
normalized
# zero replacement
# we are using the Count Zero Multiplicative approach
d.n0 <- cmultRepl(t(d.filt), method="CZM", label=0)
normalized= apply(d.n0, 2, function(x) log2(x) - mean(log2(x)))
colMeans(d.n0)
# zero replacement
# we are using the Count Zero Multiplicative approach
d.n0 <- t(cmultRepl(t(d.filt), method="CZM", label=0))
normalized= apply(d.n0, 2, function(x) log2(x) - mean(log2(x)))
colMeans(d.n0)
hist(normalized['C1.0'])
hist(normalized[['C1.0']])
hist(normalized[['C1.0',]])
head(normalized)
hist(normalized[['C1.0']])
hist(normalized[["C1.0"]])
View(head(normalized))
hist(normalized[["R1.0"]])
hist(normalized[[,"R1.0"]])
normalized['R1.0']
normalized['R1.0',]
normalized[,'R1.0']
hist(normalized[,'R1.0'])
?cmultRepl
d.n0
d.n0
colSums(d.n0)
library("xlsx")
#copy paste data of interest
data <- read.table(pipe("pbpaste"), sep="\t", header = TRUE,row.names = c(1,2))
#copy paste data of interest
data <- read.table(pipe("pbpaste"), sep="\t", header = TRUE,row.names = 1)
# it is important to first filter to remove rows that are exclusively 0 values
print(paste0("Remove ",sum(rowSums(data) == 0)," taxa because they are all zero"))
d.filt <- data[rowSums(data) > 0,]
# zero replacement
# we are using the Count Zero Multiplicative approach
d.n0 <- t(cmultRepl(t(d.filt), method="CZM", label=0))
normalized= apply(d.n0, 2, function(x) log2(x) - mean(log2(x)))
write.table(normalized,sep = '\t',file = "~/Downloads/normalized_16S.tsv")
data <- read.table("/Users/silas/Desktop/CRCEmicrobiota/CE/16S_CE/output/seqtab.tsv",
sep="\t", header = TRUE,row.names = 1)
# first filter to remove rows that are exclusively 0 values, usually none
print(paste0("Remove ",sum(rowSums(data) == 0)," taxa because they are all zero"))
d.filt <- data[rowSums(data) > 0,]
d.n0 <-cmultRepl(t(d.filt), method="CZM", label=0)
write.csv(d.n0="~/Downloads/normalized_16S.tsv")
write.csv(d.n0, "~/Downloads/normalized_16S.tsv")
dim(d.n0)
sum(d.filt==0)
sum(d.n0==0)
data <- read.table("/Users/silas/Desktop/CRCEmicrobiota/CE/16S_CE/output/seqtab.tsv",
sep="\t", header = TRUE,row.names = 1)
# data in features x samples
# first filter to remove rows that are exclusively 0 values, usually none
print(paste0("Remove ",sum(rowSums(data) == 0)," taxa because they are all zero"))
d.filt <- data[rowSums(data) > 0,]
d.n0 <-cmultRepl(t(d.filt), method="CZM", label=0)
write.csv(d.n0, "~/Downloads/normalized_16S.tsv",sep='\t')
write.table(d.n0, "~/Downloads/normalized_16S.tsv",sep='\t')
data <- read.table("/Users/silas/Desktop/CRCEmicrobiota/CE/16S_CE/output/seqtab.tsv",
sep="\t", header = TRUE,row.names = 1)
# data in features x samples
# first filter to remove rows that are exclusively 0 values, usually none
print(paste0("Remove ",sum(rowSums(data) == 0)," taxa because they are all zero"))
d.filt <- data[rowSums(data) > 0,]
d.n0 <-cmultRepl(d.filt, method="CZM", label=0)
write.table(d.n0, "~/Downloads/normalized_16S.tsv",sep='\t')
exactTest
library(Biostrings)
library(ggtree)
library(phylofactor)
library(zCompositions)
library(beeswarm)
#
setwd('~/Desktop/WarmMicrobiota/Sequencing_C/')
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
tree= read.tree("taxonomy/otu_tree.nwk")
tree= read.tree("Analysis/taxonomy/otu_tree.nwk")
D= readRDS("Analysis/data.tsv")
D= readRDS("Analysis/Analysis/data.tsv")
taxonomy= read.delim("Analysis/taxonomy/taxonomy_gg.tsv")
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Cecum',])
data= D[subset,]
metadata= metadata[row.names(D),]
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
row.names(D)
D= readRDS("Analysis/Analysis/data.tsv")
D= read.table("Analysis/Analysis/data.tsv")
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Cecum',])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
D= read.table("Analysis/Analysis/data.tsv")
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Cecum',])
row.names(D)
metadata
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata
row.names(D)
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Cecum',])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
tree= read.tree("Analysis/taxonomy/otu_tree.nwk")
D= read.table("Analysis/Analysis/data.tsv")
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Cecum',])
data= D[subset,]
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Feces',])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
subset
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata= metadata[row.names(D),]
dim(data)
row.names(D)
metadata
metadata[row.names(D),]
metadata= metadata[row.names(D),]
dim(data)
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata= metadata[row.names(D),]
dim(data)
metadata[row.names(D),]
metadata= metadata[row.names(D),]
subset= row.names(metadata[metadata$Source=='Feces',])
data= D[subset,]
dim(data)
subset
metadata$Source
metadata
subset= row.names((metadata[metadata$Group=='SH-R')|(metadata[metadata$Group=='SH-H'),])
subset= row.names(metadata[(metadata$Group=='SH-R')|(metadata[metadata$Group=='SH-H'),])
(metadata$Group=='SH-R')|(metadata[metadata$Group=='SH-H')
subset= row.names(metadata[(metadata$Group=='SH-R')||(metadata[metadata$Group=='SH-H'),])
metadata$Group=='SH-R')
(metadata$Group=='SH-R')
(metadata$Group=='SH-R')|(metadata[metadata$Group=='SH-H')
subset= row.names(metadata[(metadata$Group=='SH-R')|(metadata$Group=='SH-H'),])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
# it is important to first filter to remove rows that are exclusively 0 values
data <- data[,colSums(data) > 0]
dim(data)
if (0 %in% data)
{
data <- cmultRepl(t(data), method="CZM", label=0)
}else
{
data= t(data)
}
pf= PhyloFactor(as.matrix(data),tree,X= metadata,choice='F',
frmla = Data~ Group, ncores = 4,nfactors = 10)
barplot(pf$ExplainedVar[1:10])
barplot(pf$ExplainedVar[1:10])
barplot(pf$ExplainedVar[1:50])
pf$ExplainedVar[1:50]
summary(pf)
pf.plot(pf,factors =10)
par(mfrow = c(2, 5))
for (fofi in 1:10)
{
FactorSummary=pf.summary(pf,taxonomy,factor=fofi)
plot_data=data.frame( ILR=FactorSummary$ilr, group=factor(metadata$Group,levels = c('AL','CR')),
Source= metadata$Source)
beeswarm(ILR~  group, data =plot_data,ylab='i log ratio',main=paste0("Factor ",fofi))
bxplot(ILR~  group, data =plot_data, add = TRUE)
print(paste0("Factor ",fofi))
print(pf.taxa(pf,taxonomy,factor = fofi)$group1)
}
pf.plot(pf)
plot(tree)
ggplot2::ggplot(tree)
plot(tree)
rooted_tree= phangorn::midpoint(tree = tree)
plot(rooted_tree)
plot(tree)
taxonomy= read.delim("Analysis/taxonomy/Silva.tsv")
taxonomy= read.delim("Analysis/taxonomy/GTDB.tsv")
head(taxonomy)
taxonomy= read.delim("Analysis/taxonomy/Silva.tsv")
head(taxonomy)
source('~/Desktop/WarmMicrobiota/Sequencing_C/phylofactor_16S.R')
# install
# conda create phylofactor r rstudio r-devtools bioconductor-ggtree bioconductor-biostrings
for (package in c("ggtree","Biostrings"))#,"zCompositions"))
{
if (!(package %in% rownames(installed.packages())))
{
BiocManager::install(package)
}
}
# devtools::install_github('reptalex/phylofactor')
library(Biostrings)
library(ggtree)
library(phylofactor)
library(zCompositions)
library(beeswarm)
#library(phangorn)
setwd('~/Desktop/WarmMicrobiota/Sequencing_C/')
tree= read.tree("Analysis/taxonomy/otu_tree.nwk")
tree= phangorn::midpoint(tree = tree)
D= read.table("Analysis/Analysis/data.tsv")
taxonomy= read.delim("Analysis/taxonomy/Silva.tsv")
#row.names(taxonomy)= taxonomy$X
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata= metadata[row.names(D),]
subset= row.names(metadata[(metadata$Group=='SH-R')|(metadata$Group=='SH-H'),])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
# it is important to first filter to remove rows that are exclusively 0 values
data <- data[,colSums(data) > 0]
dim(data)
#colMeans(data)>0.1
# we are using the Count Zero Multiplicative approach
if (0 %in% data)
{
data <- cmultRepl(t(data), method="CZM", label=0)
}else
{
data= t(data)
}
# generate the centered log-ratio transformed data
# samples by row
#d.clr= apply(data, 2, function(x) log(x) - mean(log(x)))
pf= PhyloFactor(as.matrix(data),tree,X= metadata,#choice='F',
frmla = Data~ Group, ncores = 4,nfactors = 10)
barplot(pf$ExplainedVar[1:50])
summary(pf)
pf.plot(pf,factors =10)
par(mfrow = c(2, 5))
for (fofi in 1:10)
{
FactorSummary=pf.summary(pf,taxonomy,factor=fofi)
plot_data=data.frame( ILR=FactorSummary$ilr, group=factor(metadata$Group,levels = c('AL','CR')),
Source= metadata$Source)
beeswarm(ILR~  group, data =plot_data,ylab='i log ratio',main=paste0("Factor ",fofi))
bxplot(ILR~  group, data =plot_data, add = TRUE)
print(paste0("Factor ",fofi))
print(pf.taxa(pf,taxonomy,factor = fofi)$group1)
}
species.groups <- pf.groupsTospecies(pf)
fofi=1
#pf.taxa(pf,taxonomy,factor = fofi)$group1
#pf.tree(pf,layout='rectangular',factors = fofi)$ggplot
cluster= species.groups[[fofi]][[1]]; cluster
###
#plot(colSums(data[cluster,]))
#plot(colMeans(d.clr[cluster,]))
#Gastranaerophilales decreased
pf.heatmap(tree=pf$tree,Data=  apply(pf$Data, 2, function(x) log(x) - mean(log(x))))
# models
lapply(pf$models,summary) %>% lapply(getElement,'coefficients')
pf= PhyloFactor(as.matrix(data),tree,X= metadata,choice='F',
frmla = Data~ Group, ncores = 4,nfactors = 10)
summary(pf)
for (package in c("ggtree","Biostrings"))#,"zCompositions"))
{
if (!(package %in% rownames(installed.packages())))
{
BiocManager::install(package)
}
}
devtools::install_github('reptalex/phylofactor')
source('~/Desktop/WarmMicrobiota/Sequencing_C/phylofactor_16S.R')
for (package in c("ggtree","Biostrings"))#,"zCompositions"))
{
if (!(package %in% rownames(installed.packages())))
{
BiocManager::install(package)
}
BiocManager::install(package)
}
devtools::install_github('reptalex/phylofactor')
BiocManager::install("callr")
devtools::install_github('reptalex/phylofactor')
devtools::install_github('reptalex/phylofactor')
library(Biostrings)
library(ggtree)
library(phylofactor)
library(zCompositions)
library(beeswarm)
#library(phangorn)
setwd('~/Desktop/WarmMicrobiota/Sequencing_C/')
tree= read.tree("Analysis/taxonomy/otu_tree.nwk")
tree= phangorn::midpoint(tree = tree)
D= read.table("Analysis/Analysis/data.tsv")
taxonomy= read.delim("Analysis/taxonomy/taxonomy_gg.tsv")
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata= metadata[row.names(D),]
subset= row.names(metadata[(metadata$Group=='SH-R')|(metadata$Group=='SH-H'),])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
# it is important to first filter to remove rows that are exclusively 0 values
data <- data[,colSums(data) > 0]
dim(data)
if (0 %in% data)
{
data <- cmultRepl(t(data), method="CZM", label=0)
}else
{
data= t(data)
}
pf= PhyloFactor(as.matrix(data),tree,X= metadata,choice='F',
frmla = Data~ Group, ncores = 4,nfactors = 10)
barplot(pf$ExplainedVar[1:50])
# install
# conda create phylofactor r rstudio r-devtools bioconductor-ggtree bioconductor-biostrings
for (package in c("ggtree","Biostrings"))#,"zCompositions"))
{
if (!(package %in% rownames(installed.packages())))
{
BiocManager::install(package)
}
BiocManager::install(package)
}
devtools::install_github('reptalex/phylofactor')
library(Biostrings)
library(ggtree)
library(phylofactor)
library(zCompositions)
library(beeswarm)
#library(phangorn)
setwd('~/Desktop/WarmMicrobiota/Sequencing_C/')
tree= read.tree("Analysis/taxonomy/otu_tree.nwk")
tree= phangorn::midpoint(tree = tree)
D= read.table("Analysis/Analysis/data.tsv")
taxonomy= read.delim("Analysis/taxonomy/taxonomy_gg.tsv")
#row.names(taxonomy)= taxonomy$X
metadata = read.delim('Analysis/metadata.tsv',row.names = 1)
metadata= metadata[row.names(D),]
subset= row.names(metadata[(metadata$Group=='SH-R')|(metadata$Group=='SH-H'),])
data= D[subset,]
metadata= metadata[subset,]
data= data[order(metadata$Group),]
metadata= metadata[order(metadata$Group),]
dim(data)
# it is important to first filter to remove rows that are exclusively 0 values
data <- data[,colSums(data) > 0]
dim(data)
#colMeans(data)>0.1
# we are using the Count Zero Multiplicative approach
if (0 %in% data)
{
data <- cmultRepl(t(data), method="CZM", label=0)
}else
{
data= t(data)
}
# generate the centered log-ratio transformed data
# samples by row
#d.clr= apply(data, 2, function(x) log(x) - mean(log(x)))
pf= PhyloFactor(as.matrix(data),tree,X= metadata,#choice='F',
frmla = Data~ Group, ncores = 4,nfactors = 10)
barplot(pf$ExplainedVar[1:50])
summary(pf)
source('~/Desktop/WarmMicrobiota/Sequencing_C/phylofactor_16S.R')
